#include "RailFence.h"
/**********
* File: RailFence.cpp
* Intended for Project 4: UMBC Cipher
**********/

RailFence::RailFence():Cipher(){
  m_rails = 3;
}

RailFence::RailFence(string message, bool isEncrypted, int rails):Cipher(message, isEncrypted){
  m_rails = rails;
}

RailFence::~RailFence(){}

void RailFence::Encrypt(){
  char my_array[m_rails][(GetMessage().size())];
  string direction;
  int rail = 0;
  
  for (int i = 0; i < m_rails; i++){
    for (unsigned int j = 0; j < GetMessage().size(); j++){
      my_array[i][j] = '_' ;
    }
  }
  
  for (unsigned int i = 0; i < GetMessage().size(); i++){
    
      if (rail == 0){
        direction = "down";
      }else if (rail == m_rails - 1){
        direction = "up";
      }
      
      my_array[rail][i] = GetMessage()[i];
      
      if (direction == "down"){
        rail++;
      }else{
        rail--;
      }
    }

  
  string garbled = "";
  
  for (int i = 0; i < m_rails; i++){
    for (unsigned int j = 0; j < GetMessage().size(); j++){
      
      if (my_array[i][j] != '_'){
        garbled += my_array[i][j];
      }
    }
  }
  
  SetMessage(garbled);
  ToggleEncrypted();
}

void RailFence::Decrypt(){
  char my_array[m_rails][(GetMessage().size())];
  string direction;
  int rail = 0;
  
  for (int i = 0; i < m_rails; i++){
    for (unsigned int j = 0; j < GetMessage().size(); j++){
      my_array[i][j] = '_' ;
    }
  }
  
  for (unsigned int i = 0; i < GetMessage().size(); i++){
    
    if (rail == 0){
      direction = "down";
    }else if (rail == m_rails - 1){
      direction = "up";
    }
    
    my_array[rail][i] = '*';
    
    if (direction == "down"){
      rail++;
    }else{
      rail--;
    }
  }
  
  unsigned int counter = 0;
  
  for(int i = 0; i < m_rails; i++){
    for(unsigned int j = 0; j < GetMessage().size(); j++){
      
      if (my_array[i][j] == '*' and counter < GetMessage().size()){
	my_array[i][j] = GetMessage()[counter];
	counter++;
      }
    }
  }
  
  string straight = "";
  rail = 0;
  
  for (unsigned int i = 0; i < GetMessage().size(); i++){
    
    if (rail == 0){
      direction = "down";
    }else if (rail == m_rails - 1){
      direction = "up";
    }
    
    if (my_array[rail][i] != '_'){
      straight += my_array[rail][i];
    }
    
    if (direction == "down"){
      rail++;
    }else{
      rail--;
    }
  }
  
  SetMessage(straight);
  ToggleEncrypted();
}

string RailFence::ToString(){
  return "(RailFence)";
}

string RailFence::FormatOutput(){
  stringstream ss;
  ss << "r" << DELIMITER << int(GetIsEncrypted()) << DELIMITER << GetMessage() << DELIMITER << m_rails << endl;
  return ss.str();
}
