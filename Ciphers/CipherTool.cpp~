#include "CipherTool.h"
/**********
* File: CipherTool.cpp
* Intended for Project 4: UMBC Cipher
**********/

//OverLoaded Constructor
CipherTool::CipherTool(string filename){
  m_filename = filename;
}

//Destructor
CipherTool::~CipherTool(){
  for (unsigned int i = 0; i < m_ciphers.size(); i++){
    delete m_ciphers[i];
    m_ciphers[i] = nullptr;
  }
  m_ciphers.resize(0);
}

//Loads all lines from file
void CipherTool::LoadFile(){
  string type, strbool, message, strnum;
  bool boolean;
  int num = 0;

  fstream inputStream;
  inputStream.open(m_filename);//Opens the file

  if (inputStream.is_open()){//Checks if file is open

    while(getline(inputStream, type, '|') and getline(inputStream, strbool, '|') and getline(inputStream, message, '|') and getline(inputStream, strnum)){

      boolean = StringToBoolean(strbool); // converts string num to bool

      if (type != "o" and type != "v")
	num = stoi(strnum); // converts string to num (except for Ong)

      Cipher *cipher;

      if (type == "c"){
        cipher = new Caesar(message, boolean, num);
	
      }else if (type == "r"){
        cipher = new RailFence(message, boolean, num);

      }else if (type == "o"){
        cipher = new Ong(message, boolean);

      }else if (type == "v"){
	cipher = new Vigenere(message, boolean, strnum)
	
      }

      m_ciphers.push_back(cipher);//Adds dynamically allocated cipher to vector
    }
    
    inputStream.close();//Closes the file

  }else{
    cout << "File Could Not Be Found!" << endl;
  }
}

//Converts string num to boolean
bool CipherTool::StringToBoolean(string input){
  if(stoi(input) == 0) {
    return false;
  }
  else{
    return true;
  }
}

//Displays all ciphers in vector
void CipherTool::DisplayCiphers(){
  for (unsigned int i = 0; i<m_ciphers.size(); i++){
    cout << i+1 << ". " << *m_ciphers[i] << m_ciphers[i]->ToString() << endl << endl;
  }
}

//Encrypts/Decrypts based on bool given
void CipherTool::EncryptDecrypt(bool Bool){
  int counter = 0;
  
  for (unsigned int i = 0; i < m_ciphers.size(); i++){

    //Encrypts
    if (Bool){ 
      if (not m_ciphers[i]->GetIsEncrypted()){
	m_ciphers[i]->Encrypt();
	counter++;
      }
      
    //Decrypts  
    }else if (not Bool){
      if (m_ciphers[i]->GetIsEncrypted()){
	m_ciphers[i]->Decrypt();
	counter++;
      }
    }
  }
  
  cout << counter << " ciphers ";
  Bool? cout << "Encrypted" << endl : cout << "Decrypted" << endl; //Ternary Operator
}

//Exports current lines to a file
void CipherTool::Export(){
  string fileName;
  int counter = 0;
  
  cout << "What would you like to call the export file?" << endl;
  cin >> fileName;
  
  ofstream inputStream(fileName); //To crete a new write file
  
  for (unsigned int i = 0; i < m_ciphers.size(); i++){
    inputStream << m_ciphers[i]->FormatOutput();
    counter++;
  }
  cout << counter << " ciphers exported" << endl;
  inputStream.close(); //Closes the file
}

//Menu to request choice from user
int CipherTool::Menu(){
  int choice = 0;
    cout << "What would you like to do?" << endl;
    cout << "1. Display all ciphers" << endl;
    cout << "2. Encrypt all ciphers" << endl;
    cout << "3. Decrypt all ciphers" << endl;
    cout << "4. Export all ciphers" << endl;
    cout << "5. Quit" << endl;
    cin >> choice;

    while (choice < 1 or choice > 5){
      cout << "Invalid Input" << endl;
      cin >> choice;
    }
    return choice;
}

//Loads the file and starts the project
void CipherTool::Start(){
  LoadFile();
  
  int choice;
  do{
    choice = Menu();

    if (choice == 1){
      DisplayCiphers();
      
    }else if(choice == 2){
      EncryptDecrypt(true);   
      
    }else if (choice == 3){
      EncryptDecrypt(false);
    
    }else if (choice == 4){
      Export();
      
    }
  }while (choice != 5);

  cout << "Thanks for using UMBC Encryption" << endl;
}
